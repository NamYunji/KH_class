package kh.java.collection.set;

import java.util.Collection;
import java.util.HashSet;
import java.util.Iterator;
import java.util.Set;

public class HashSetTest {
/**
 * hashSet의 계층구조
 * Collection - Set - HashSet
 * - 중복 허용하지 않음
 * - 저장된 순서 보장 X
 * 
 * (조회할 때 마다 순서가 바뀌지는 않지만,
 * 내부적인 자기만의 순서대로 정렬하는 것)
 * 
 * LinkedHashSet
 * - 저장된 순서 유지
 * - 중복 허용 x
 * TreeSet
 * - 저장된 순서 유지 + 오름차순 정렬 지원
 * - 중복 허용 X
 * 
 * 
 * 
 */
	
	public static void main(String[] args) {
		HashSetTest h = new HashSetTest();
		h.test1();

	}

private void test1() {
	HashSet<Integer> set1 = new HashSet();
	Set<String> set2 = new HashSet<String>();
	Collection<Double> set3 = new HashSet<>();
	
	set2.add("안녕");
//	set2.add(123); // 제네릭 덕분에 다른 타입의 요소는 추가 불가
	set2.add("hello world");
	set2.add("ㅋㅋㅋ");
	set2.add("ㅋㅋㅋ"); //중복 허용 x
	
	//저장된 요소 개수 확인 : size 메소드 사용
	System.out.println(set2.size());
//	System.out.println(set2);
	
	//but 인덱스를 통한 요소가져오기는 지원하지 않음
//	set2.get(2);
	//가져오려면, 반복문을 통한 전체 열람만 가능
	//일반 for문은 사용할 수 없음  (why? 인덱스 사용이 불가능하기 때문)
	//-> index사용 없이 쓸 수 있는 것만 가능
	
	//1. for each문 가능
	for(String s : set2)
		System.out.println(s);
	
	//2. iterator객체 이용
	Iterator<String> iter = set2.iterator();
	while(iter.hasNext()) {
		String s = iter.next();
	}
	
	System.out.println(set2);
}

}
