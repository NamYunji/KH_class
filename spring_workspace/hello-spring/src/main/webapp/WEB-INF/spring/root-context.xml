<?xml version="1.0" encoding="UTF-8"?>
<!-- context namespace 추가됨 -->
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.3.xsd">
	
	<!-- target/classes/datasource.properties의 정보를 읽어옴
		 이 태그를 사용하기 위해 context namespace 추가 --> 
	<context:property-placeholder location="classpath:datasource.properties"/>
	
	<!-- Root Context: defines shared resources visible to all other web components -->
	<!-- #7.1. datasource & mybatis 관련 빈 등록 -->
	<!-- 접속하고자 하는 db에 관한 정보를 속성으로 가지고 있는 bean
		 중요한 정보이기 때문에 따로 properties파일로 빼서 등록 -->
	<!-- 실제 datasource 빈 -->
	<bean class="org.apache.commons.dbcp.BasicDataSource"
		  id="realDataSource"
		  destroy-method="close">
		<property name="driverClassName" value="${datasource.driverClassName}"/>
		<property name="url" value="${datasource.url}"/>
		<property name="username" value="${datasource.username}"/>
		<property name="password" value="${datasource.password}"/>
	</bean>
	<!-- #10.1.log4jdbc-remix 관련 dataSource처리  -->
    <!-- 기존 dataSource빈을 이용해서 proxyDataSource를 만듬 -->
    <!-- 실제 datasource 빈을 참조해서 가짜 proxyDataSource를 만든 것!
    	 datasource를 사용하려면 proxyDataSource를 거쳐서 가야함. 이 와중에 로깅이 일어남 -->
    <bean id="dataSource" class="net.sf.log4jdbc.Log4jdbcProxyDataSource">  
        <constructor-arg ref="realDataSource" />
        <property name="logFormatter">
            <bean class="net.sf.log4jdbc.tools.Log4JdbcCustomFormatter">    
                <property name="loggingType" value="MULTI_LINE" />
                <property name="sqlPrefix" value="[SQL] " />
            </bean>
        </property>
    </bean>
 
	<!-- #7.2. myBatis(JDBC)설정 : SqlSessionFactory -->
	<!-- dataSource가 필요한 건 sqlSessionFactoryBean
		 sqlSessionFactoryBean가 필요한 건 dataSource
		 -> (7.2) sqlSessionFactoryBean -> (10.1) dataSource - realDataSource -> (7.1) realDataSource -->
	<bean id="sqlSessionFactoryBean" class="org.mybatis.spring.SqlSessionFactoryBean">
		<!-- name=dataSource => 빈객체sqlSessionFactoryBean의  property명 dataSource임(setter) -->
		<!-- ref의 dataSource는 위에서 선언한 datasource 빈객체를 의미함. -->
		<!-- dataSource에 db 접속정보가 있으므로, dataSource를 참조함 -->
		<property name="dataSource" ref="dataSource"/>
		<!-- 앞으로 생성할 모든 mapper파일을 한번에 읽어오도록하자.
			 wildcard (**) -> mapper등록을 따로 진행할 필요 없음 -->
		<!-- 여기서 classpath는 target/classes를 의미한다.-->
		<!-- src/main/resources 디렉토리에서 작성된 파일들은 classpath로 이동함.-->
		<property name="mapperLocations" value="classpath*:mapper/**/*.xml"/>
		<!-- mybatis-config.xml파일 위치를 명시함. -->
		<property name="configLocation" value="classpath:mybatis-config.xml"/>
	</bean>
	<!-- #7.3. SqlSessionTemplate 마이바티스 스프링 연동모듈의 핵심기능. -->
	<!-- SqlSessionTemplate : SqlSession 인터페이스를 구현클래스-->
	<!-- 여러 dao에서 공유하므로 메모리관리에 있어 최적화된 테크닉. -->
	<bean id="sqlSessionTemplate" class="org.mybatis.spring.SqlSessionTemplate">
		<constructor-arg index="0" ref="sqlSessionFactoryBean"/>
	</bean>
	
	<!-- #13.1. 트랜잭션 처리를 위한 트랜잭션매니저 설정해야 한다. -->
	<!-- 추상체 transaction manager의 구현체인 datasource transaction manager
		 mybatis는 이 구현체를 이용한다. -->
	<bean 
		id="transactionManager" 
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>
	<!-- #13.2. @Transactional 어노테이션 처리 -->
	<!-- 위에 설정한 트랜잭션 bean의 id를 transaction-manager속성으로 등록 -->
	<!-- <tx:annotation-driven transaction-manager="transactionManager"/> -->
	
	<!-- #13.2 선언적 xml방식의 트랜잭션처리 -->
	<!-- advice : 보조업무 선언 -->
	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<!-- 
				트랜잭션 처리를 각 메소드 이름의 시작으로 분류해서 예외 발생시 롤백처리 
				select메소드의 read-only="true" 설정 : select메소드안에서 dml을 실행하면 오류발생!
			-->
			<tx:method name="select*" rollback-for="Exception" read-only="true"/>
			<tx:method name="insert*" rollback-for="Exception"/>
			<tx:method name="update*" rollback-for="Exception"/>
			<tx:method name="delete*" rollback-for="Exception"/>
		</tx:attributes>
	</tx:advice>
    <aop:config proxy-target-class="true">
		<!-- 어디에 이 트랜잭션 advice를 끼워넣을지 pointcut 설정 -->
		<!-- expression : ~ServiceImpl에 있는 모든 메소드를 대상으로 advice 실행 -->
		<aop:pointcut id="serviceMethod" expression="execution(* com.kh.spring..*ServiceImpl.*(..)))"/>
		<!-- advisor는 단 하나의 pointcut, 단 하나의 advice를 그룹핑한 것
			 cf. aspect : 다수의 pointcut, 다수의 advice를 관리 -->
		<!-- advice-ref로 위에 선언한 advice의 id, point-ref로 위에 선언한 pointcut의 id -->
		<aop:advisor id="transactionAdvisor" advice-ref="txAdvice" pointcut-ref="serviceMethod"/>
	</aop:config>
	<!-- 
		=> service클래스의 모든 메소드에 이 advice를 적용해주세요!
		servlet-context의 autoproxy태그에 의해 servlet-context에 적용됨
	-->
</beans>
