<?xml version="1.0" encoding="UTF-8"?>
<!-- 기본 naemspace를 확인하는 법
xmlns="" - 기본 namespace
xmlns:~~~="" - 그 외의 namespace -->
<beans:beans xmlns="http://www.springframework.org/schema/mvc"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc.xsd
		http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd">
	<!-- 기본 namespace는 mvc이다. (기본 namespace는 beans가 아님)-->
	<!-- DispatcherServlet Context: defines this servlet's request-processing infrastructure -->
	
	<!-- Enables the Spring MVC @Controller programming model -->
	<!-- @Controller MVC흐름과 관련해서 사용되는 어노테이션 -->
	<!-- @Controller 어노테이션이 붙은 클래스가 사용자 요청을 처리할 수 있도록 함 -->
	
	<!-- namespace를 작성하지 않고 쓴 태그들은 모두 mvc namespace의 annotation-driven임 -->
	<!-- <mvc:annotation-driven /> -->
	<!-- beans가 기본 namespace가 아니기 때문에, bean 태그들에는 앞에 beans라는 namespace가 붙음 -->
	<annotation-driven />

	<!-- [Resources] -->
	<!-- Handles HTTP GET requests for /resources/** by efficiently serving up static resources in the ${webappRoot}/resources directory -->
	<!-- 정적파일에 대한 요청 및 location을 mapping한다 
		 ex. resources로 시작하는 어떤 요청이 들어오면 그것의 위치는 webapp밑에 있는 resources/에서 찾아라 -->
	<!--
		사용가능한 와일드 카드 
		* : foo/ 디렉토리 상에서의 요청만 처리 가능
		/foo/* : /foo, /foo/a
		** : foo/ 하위의 모든 것들을 처리
		/foo/** : /foo, /foo/a, /foo/a/b/c.do 모두 처리 가능
	-->
	<resources mapping="/resources/**" location="/resources/" />

	<!-- [View Resolver] -->
	<!-- Resolves views selected for rendering by @Controllers to .jsp resources in the /WEB-INF/views directory -->
	<!-- view단의 jsp를 찾기 위한 ViewResolver(view단을 처리하는) 빈 등록
		 cf. Resolver~ : 무언갈 처리,해결하는 것 -->
	<!-- controller의 메소드가 리턴한 문자열 값에 /WEB-INF/views/ 를 앞에, .jsp를 뒤에 붙여서 view단을 찾아감 -->
	<beans:bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<beans:property name="prefix" value="/WEB-INF/views/" />
		<beans:property name="suffix" value=".jsp" />
	</beans:bean>
	
	<!-- [Component-Scan] -->
	<!--
		base-package 하위의 어노테이션을 검색/처리
		@Component, @Autowired, @Controller, @Service, @Required, @Autowired ... -->
	<context:component-scan base-package="com.kh.spring" />
	<!-- #9. interceptor 등록 -->
	<interceptors>
		<interceptor>
			<!-- 어떤 요청에 interceptor를 사용할지
				 /** : 모든 요청 -->
			<mapping path="/**"/>
			<!-- 어떤 bean을 사용할지 bean 등록 -->
			<beans:bean 
				id="LoggerInterceptor" 
				class="com.kh.spring.common.interceptor.LoggerInterceptor"/>
		</interceptor>
		<interceptor>
			<!-- /member/로 시작하는 모든 것에 적용하되 -->
			<mapping path="/member/**"/>
			<mapping path="/board/**"/>
			<!-- /member/memberLogin.do는 제외하라
				why? 로그인하기도 전에 return false하면 안되니까 -->
			<exclude-mapping path="/member/memberLogin.do"/>
			<exclude-mapping path="/member/memberEnroll.do"/>
			<exclude-mapping path="/board/boardList.do"/>
			<beans:bean id="LoginInterceptor" class="com.kh.spring.common.interceptor.LoginInterceptor"/>
		</interceptor>
	</interceptors>
	
	<!-- #11.1 aop 관련 -->
	<!-- xml방식 -->
	<!-- bean등록 : 만들어둔 aspect 클래스를 등록함 -->
<!-- 	
	<beans:bean id="loggerAspect" class="com.kh.spring.common.aop.LoggerAspect"/>
	해당 bean을 aop 보조업무로 사용할 것임을 선언
	<aop:config>
		bean을 가져다 aspect로 등록
		ref로 위에 만들어둔 bean의 id를 연결
		<aop:aspect id="loggerAspect" ref="loggerAspect">
			pointCut설정 : advice를 어떤 조인포인트에 사용할 것인가에 대한 표현식
			expression에 메소드 시그니쳐를 적어줌
				 리턴타입 * : 아무거나
				 패키지.클래스명.메소드명(매개변수)
				 (..) : 매개변수가 뭐가됐든지간에
				 .. : memo하위 어떤 패키지 어떤 클래스 하위의 insertMemo메소드
				 
			<aop:pointcut expression="execution(* com.kh.spring.memo..insertMemo(..))" id="loggerPointcut"/>
			그 안의 logger 메소드를 가져와서 around로 사용하겠다!
			pointcut-ref로 pointcut태그의 id를 연결
			<aop:around method="logger" pointcut-ref="loggerPointcut"></aop:around>
		</aop:aspect>
	</aop:config> 
	-->
	<!-- annotation 방식 -->
	<!-- aop:aspectj-autoproxy 태그 
		 aop관련 annotation을 등록
		 root-context의 aop설정을 servlet-context에 적용
		 root-context에 aop관련 설정이 있다면, servlet-context에 가져와서 적용 -->
	<aop:aspectj-autoproxy/>
	
	<!-- #12.1 파일업로드를 처리할 Resolver클래스 빈등록(빈이름 주의) -->
	<!-- 실제 업로드를 처리할 bean 객체 -->
	<beans:bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">   
		<!--
			multipart/form-data 요청당 최대 파일 크기는 50MB(50 * 1024 * 1024)이다. 
			default: -1(제한없음)-->
		<beans:property name="maxUploadSize" value="52428800" /> 
		<!-- 파일하나당 최대용량은 10MB(10 * 1024 * 1024)이다. 기본값: -1(제한없음) -->
		<beans:property name="maxUploadSizePerFile" value="10485760" /> 
		<!-- 메모리 사용최대용량. 기본값 10240(10KB). 이값을 넘어가면, 내부적으로 임시파일로 저장함. -->
		<beans:property name="maxInMemorySize" value="10240" /> 
	</beans:bean>
</beans:beans>
