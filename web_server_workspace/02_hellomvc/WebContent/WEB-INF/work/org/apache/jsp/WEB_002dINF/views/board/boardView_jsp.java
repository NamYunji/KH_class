/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.44
 * Generated at: 2021-04-23 01:44:28 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.views.board;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import board.model.vo.BoardComment;
import java.util.List;
import board.model.vo.Board;
import member.model.service.MemberService;
import member.model.vo.Member;

public final class boardView_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(2);
    _jspx_dependants.put("/WEB-INF/views/common/header.jsp", Long.valueOf(1617742633228L));
    _jspx_dependants.put("/WEB-INF/views/common/footer.jsp", Long.valueOf(1616949802944L));
  }

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("member.model.service.MemberService");
    _jspx_imports_classes.add("java.util.List");
    _jspx_imports_classes.add("board.model.vo.BoardComment");
    _jspx_imports_classes.add("member.model.vo.Member");
    _jspx_imports_classes.add("board.model.vo.Board");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");

	// 사용자 알림메시지
	// return타입이 object이므로 다운캐스팅 필요
	String msg = (String)session.getAttribute("msg");
	// 한번 읽어내고, 메시지 변수에 담은 후에는 세션에서 바로 지워버리기 -> 일회용 msg만들기
	if(msg != null) session.removeAttribute("msg");
	String loc = (String)request.getAttribute("loc");	
	System.out.println("msg@header.jsp = " + msg);
	Member loginMember = (Member)session.getAttribute("loginMember");
	
	// 사용자 쿠키처리
	String saveId = null;
	// 헤더에서 이 처리 - 모든 jsp에서 header.jsp를 포함 - 모든 요청에서 이걸 검사하겠다는 것
	// 쿠키 가져오기 - getCookies() -> cookie 배열 리턴
	Cookie[] cookies = request.getCookies();
	// 쿠키 열람
	// 처음 접속했을 때는 cookie가 null이기 때문에, null이 아닐 때만 검사
	if(cookies != null){
		for(Cookie c : cookies){
			// key, value형식 (name, value)
			String name = c.getName();
			String value = c.getValue();
			System.out.println(name + " : " + value);
			
			// saveId라는 name값이 있다면 saveId에 value(사용자 아이디)를 저장
			if("saveId".equals(name))
				saveId = value;
		}
	}

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>Hello MVC</title>\r\n");
      out.write("<link rel=\"stylesheet\"\r\n");
      out.write("\thref=\"");
      out.print(request.getContextPath());
      out.write("/css/style.css\" />\r\n");
      out.write("\r\n");
      out.write("<script src=\"");
      out.print(request.getContextPath());
      out.write("/js/jquery-3.6.0.js\"></script>\r\n");
      out.write("<script>\r\n");
      out.write("/* msg를 페이지 실행하자마자 보여줌 */\r\n");
      out.write("/* alert(< % = msg % >); */\r\n");
      out.write("/* alert(로그인에 성공했습니다.); -> alert(\"로그인에 성공했습니다.\");*/\r\n");
      out.write("/* null이 아닌 경우에만 alert하도록 */\r\n");
 if(msg != null) { 
      out.write("\r\n");
      out.write("\talert(\"");
      out.print( msg );
      out.write("\"); \r\n");
 } 
      out.write("\r\n");
      out.write("\r\n");
      out.write('\r');
      out.write('\n');
 if(loc != null) { 
      out.write("\r\n");
      out.write("\tlocation.href = \"");
      out.print( loc );
      out.write("\";\r\n");
 } 
      out.write("\r\n");
      out.write("/* 로그인 폼 유효성 검사 */\r\n");
      out.write("$(function(){\r\n");
      out.write("\t$(\"#loginFrm\").submit(function(){\r\n");
      out.write("\t\t/* 선택자가 아닌 태그객체 전달 */\r\n");
      out.write("\t\tvar $memberId = $(memberId);\r\n");
      out.write("\t\tvar $password = $(password);\r\n");
      out.write("\t\t\r\n");
      out.write("\t\tif(/^.{4,}/.test($memberId.val()) == false){\r\n");
      out.write("\t\t\talert(\"유효한 아이디를 입력하세요.\");\r\n");
      out.write("\t\t\t$memberId.select();\r\n");
      out.write("\t\t\treturn false;\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\tif(/^.{4,}/.test($password.val()) == false){\r\n");
      out.write("\t\t\talert(\"유효한 비밀번호를 입력하세요.\");\r\n");
      out.write("\t\t\t$password.select();\r\n");
      out.write("\t\t\treturn false;\r\n");
      out.write("\t\t}\r\n");
      out.write("\t});\r\n");
      out.write("});\r\n");
      out.write("</script>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("\t<div id=\"container\">\r\n");
      out.write("\t\t<header>\r\n");
      out.write("\t\t\t<h1>Hello MVC</h1>\r\n");
      out.write("\r\n");
      out.write("\t\t\t<div class=\"login-container\">\r\n");
      out.write("\t\t\t");
 if(loginMember == null) {
      out.write("\r\n");
      out.write("\t\t\t\t<!-- 로그인폼 시작 -->\r\n");
      out.write("\t\t\t\t<!-- 비밀번호가 URL에 드러나지 않도록, POST로 처리 -->\r\n");
      out.write("\t\t\t\t<form id=\"loginFrm\" action=\"");
      out.print( request.getContextPath() );
      out.write("/member/login\" method=\"POST\">\r\n");
      out.write("\t\t\t\t\t<table>\r\n");
      out.write("\t\t\t\t\t\t<tr>\r\n");
      out.write("\t\t\t\t\t\t\t<td><input type=\"text\" name=\"memberId\" id=\"memberId\"\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\tplaceholder=\"아이디\" tabindex=\"1\"\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\tvalue=\"");
      out.print( saveId != null ? saveId : "" );
      out.write("\"></td>\r\n");
      out.write("\t\t\t\t\t\t\t\t\t");
      out.write("\r\n");
      out.write("\t\t\t\t\t\t\t<td><input type=\"submit\" value=\"로그인\" tabindex=\"3\"></td>\r\n");
      out.write("\t\t\t\t\t\t</tr>\r\n");
      out.write("\t\t\t\t\t\t<tr>\r\n");
      out.write("\t\t\t\t\t\t\t<td><input type=\"password\" name=\"password\" id=\"password\" placeholder=\"비밀번호\" tabindex=\"2\"></td>\r\n");
      out.write("\t\t\t\t\t\t\t<td></td>\r\n");
      out.write("\t\t\t\t\t\t</tr>\r\n");
      out.write("\t\t\t\t\t\t<tr>\r\n");
      out.write("\t\t\t\t\t\t\t<td colspan=\"2\"><input type=\"checkbox\" name=\"saveId\" id=\"saveId\"\r\n");
      out.write("\t\t\t\t\t\t\t");
      out.print( saveId != null ? "checked" : "");
      out.write("/>\r\n");
      out.write("\t\t\t\t\t\t\t");
      out.write(" \r\n");
      out.write("\t\t\t\t\t\t\t<label for=\"saveId\">아이디저장</label>&nbsp;&nbsp;\r\n");
      out.write("\t\t\t\t\t\t\t<input type=\"button\" value=\"회원가입\" onclick=\"location.href='");
      out.print( request.getContextPath());
      out.write("/member/memberEnroll';\"></td>\r\n");
      out.write("\t\t\t\t\t\t</tr>\r\n");
      out.write("\t\t\t\t\t</table>\r\n");
      out.write("\t\t\t\t</form>\r\n");
      out.write("\t\t\t<!-- 로그인폼 끝-->\r\n");
      out.write("\t\t\t");
 } else { 
      out.write("\r\n");
      out.write("\t\t\t");
      out.write("\r\n");
      out.write("\t\t\t<table id=\"login\">\r\n");
      out.write("\t\t\t\t<tr>\r\n");
      out.write("\t\t\t\t\t<td>");
      out.print( loginMember.getMemberName() );
      out.write("님, 안녕하세요.</td>\r\n");
      out.write("\t\t\t\t</tr>\r\n");
      out.write("\t\t\t\t<tr>\r\n");
      out.write("\t\t\t\t\t<td>\r\n");
      out.write("\t\t\t\t\t\t<input type=\"button\" value=\"내정보보기\" onclick=\"location.href='");
      out.print( request.getContextPath() );
      out.write("/member/memberView'\"/>\r\n");
      out.write("\t\t\t\t\t\t");
      out.write("\r\n");
      out.write("\t\t\t\t\t\t<input type=\"button\" value=\"로그아웃\"\r\n");
      out.write("\t\t\t\t\t\t\tonclick=\"location.href='");
      out.print( request.getContextPath() );
      out.write("/member/logout';\"/>\r\n");
      out.write("\t\t\t\t\t</td>\r\n");
      out.write("\t\t\t\t</tr>\r\n");
      out.write("\t\t\t</table>\r\n");
      out.write("\t\t\t");
 } 
      out.write("\r\n");
      out.write("\t\t\t</div>\r\n");
      out.write("\t\t\t<!-- 메인메뉴 시작 -->\r\n");
      out.write("\t\t\t<nav>\r\n");
      out.write("\t\t\t\t<ul class=\"main-nav\">\r\n");
      out.write("\t\t\t\t\t<li class=\"home\"><a href=\"");
      out.print(request.getContextPath());
      out.write("\">Home</a></li>\r\n");
      out.write("\t\t\t\t\t<li class=\"notice\"><a href=\"#\">공지사항</a></li>\r\n");
      out.write("\t\t\t\t\t<li class=\"board\"><a href=\"");
      out.print(request.getContextPath());
      out.write("/board/boardList\">게시판</a></li>\r\n");
      out.write("\t\t\t\t\t");
      out.write("\r\n");
      out.write("\t\t\t\t\t");
 if(loginMember != null && MemberService.ADMIN_ROLE.equals(loginMember.getMemberRole())){ 
      out.write("\r\n");
      out.write("\t\t\t\t\t<li class=\"members\"><a href=\"");
      out.print( request.getContextPath());
      out.write("/admin/memberList\">회원관리</a></li>\r\n");
      out.write("\t\t\t\t\t");
 } 
      out.write("\r\n");
      out.write("\t\t\t\t</ul>\r\n");
      out.write("\t\t\t</nav>\r\n");
      out.write("\t\t\t<!-- 메인메뉴 끝-->\r\n");
      out.write("\t\t</header>\r\n");
      out.write("\t\t<section id=\"content\">");
      out.write('\r');
      out.write('\n');

	Board board = (Board)request.getAttribute("board");
	boolean editable =
			loginMember != null &&
			(
		 		loginMember.getMemberId().equals(board.getWriter())
		 		|| MemberService.ADMIN_ROLE.equals(loginMember.getMemberRole())
			);
	List<BoardComment> commentList = (List<BoardComment>) request.getAttribute("commentList");

      out.write("\r\n");
      out.write("\r\n");
      out.write("<link rel=\"stylesheet\" href=\"");
      out.print(request.getContextPath());
      out.write("/css/board.css\" />\r\n");
      out.write("<section id=\"board-container\">\r\n");
      out.write("\t<h2>게시판</h2>\r\n");
      out.write("\t<table id=\"tbl-board-view\">\r\n");
      out.write("\t\t<tr>\r\n");
      out.write("\t\t\t<th>글번호</th>\r\n");
      out.write("\t\t\t<td>");
      out.print( board.getNo() );
      out.write("</td>\r\n");
      out.write("\t\t</tr>\r\n");
      out.write("\t\t<tr>\r\n");
      out.write("\t\t\t<th>제 목</th>\r\n");
      out.write("\t\t\t<td>");
      out.print( board.getTitle() );
      out.write("</td>\r\n");
      out.write("\t\t</tr>\r\n");
      out.write("\t\t<tr>\r\n");
      out.write("\t\t\t<th>작성자</th>\r\n");
      out.write("\t\t\t<td>");
      out.print( board.getWriter() );
      out.write("</td>\r\n");
      out.write("\t\t</tr>\r\n");
      out.write("\t\t<tr>\r\n");
      out.write("\t\t\t<th>조회수</th>\r\n");
      out.write("\t\t\t<td>");
      out.print( board.getReadCount() );
      out.write("</td>\r\n");
      out.write("\t\t</tr>\r\n");
      out.write("\t\t<tr>\r\n");
      out.write("\t\t\t<th>첨부파일</th>\r\n");
      out.write("\t\t\t<td>\r\n");
      out.write("\t\t\t\t");
 if(board.getAttach() != null){ 
      out.write("\r\n");
      out.write("\t\t\t\t");
      out.write("\r\n");
      out.write("\t\t\t\t<img alt=\"첨부파일\" src=\"");
      out.print(request.getContextPath() );
      out.write("/images/file.png\" width=16px>\r\n");
      out.write("\t\t\t\t");
      out.write("\r\n");
      out.write("\t\t\t\t<a href=\"/*/board/fileDownload?no=");
      out.print( board.getNo());
      out.write('"');
      out.write('>');
      out.print( board.getAttach().getOriginalFileName() );
      out.write("</a>\r\n");
      out.write("\t\t\t\t");
 } 
      out.write("\r\n");
      out.write("\t\t\t</td>\r\n");
      out.write("\t\t</tr>\r\n");
      out.write("\t\t<tr>\r\n");
      out.write("\t\t\t<th>내 용</th>\r\n");
      out.write("\t\t\t<td>");
      out.print( board.getContent() );
      out.write("</td>\r\n");
      out.write("\t\t</tr>\r\n");
      out.write("\t\t<!-- 작성자 또는 관리자일 경우에만 노출-->\r\n");
      out.write("\t\t");
 if(editable) { 
      out.write("\r\n");
      out.write("\t\t<tr>\r\n");
      out.write("\t\t\t");
      out.write("\r\n");
      out.write("\t\t\t<th colspan=\"2\">\r\n");
      out.write("\t\t\t\t<input type=\"button\" value=\"수정하기\" onclick=\"updateBoard()\">\r\n");
      out.write("\t\t\t\t<input type=\"button\" value=\"삭제하기\" onclick=\"deleteBoard()\">\r\n");
      out.write("\t\t\t</th>\r\n");
      out.write("\t\t</tr>\r\n");
      out.write("\t\t");
 } 
      out.write("\r\n");
      out.write("\t</table>\r\n");
      out.write("\t<!-- 댓글 폼 -->\r\n");
      out.write("\t<hr style=\"margin-top:30px;\" />\t\r\n");
      out.write("\t<div class=\"comment-container\">\r\n");
      out.write("        <div class=\"comment-editor\">\r\n");
      out.write("            <form action=\"");
      out.print(request.getContextPath());
      out.write("/board/boardCommentInsert\" method=\"post\" name=\"boardCommentFrm\">\r\n");
      out.write("                <input type=\"hidden\" name=\"boardNo\" value=\"");
      out.print( board.getNo() );
      out.write("\" />\r\n");
      out.write("                <input type=\"hidden\" name=\"writer\" value=\"");
      out.print( loginMember != null ? loginMember.getMemberId() : "");
      out.write("\" />\r\n");
      out.write("                <!-- boardView페이지는 로그인하지 않고도 볼 수 있음\r\n");
      out.write("                \t  로그인 안하고 loginMember.getMemberId하면 null point exception\r\n");
      out.write("                \t 우선 로그인하지 않은 경우는 공란으로 메꿔줌-->\r\n");
      out.write("                <input type=\"hidden\" name=\"commentLevel\" value=\"1\" />\r\n");
      out.write("                <!-- 댓글이니까 commentLevel은 1로 고정 -->\r\n");
      out.write("                <input type=\"hidden\" name=\"commentRef\" value=\"0\" />    \r\n");
      out.write("                <!-- commentRef는 대댓글에만 해당 -> 0으로 세팅 -->\r\n");
      out.write("\t\t\t\t<textarea name=\"content\" cols=\"60\" rows=\"3\"></textarea>\r\n");
      out.write("                <button type=\"submit\" id=\"btn-insert\">등록</button>\r\n");
      out.write("            </form>\r\n");
      out.write("        </div>\r\n");
      out.write("\t\t<!--table#tbl-comment -->\r\n");
      out.write("\t\t");
 if(commentList != null && !commentList.isEmpty()){ 
      out.write("\t\r\n");
      out.write("\t\t<table id=\"tbl-comment\">\r\n");
      out.write("\t\t");
 for(BoardComment bc : commentList){ 
			boolean removable =
					loginMember != null &&
					(
				 		loginMember.getMemberId().equals(bc.getWriter())
				 		|| MemberService.ADMIN_ROLE.equals(loginMember.getMemberRole())
					);
			if(bc.getCommentLevel() == 1){
		
      out.write("\t\r\n");
      out.write("\t\t\t<!-- 댓글 : commentLevel = 1 -->\r\n");
      out.write("\t\t\t<tr class=\"level1\">\r\n");
      out.write("\t\t\t\t<td>\r\n");
      out.write("\t\t\t\t\t<!-- sub태그 : 글씨를 첨자처럼 작게 나타내주는 태그 -->\r\n");
      out.write("\t\t\t\t\t<sub class=\"comment-writer\">");
      out.print( bc.getWriter() );
      out.write("</sub>\r\n");
      out.write("\t\t\t\t\t<sub class=\"comment-date\">");
      out.print( bc.getRegDate() );
      out.write("</sub>\r\n");
      out.write("\t\t\t\t\t<br />\r\n");
      out.write("\t\t\t\t\t");
      out.print( bc.getContent() );
      out.write("\r\n");
      out.write("\t\t\t\t</td>\r\n");
      out.write("\t\t\t\t<td>\r\n");
      out.write("\t\t\t\t\t<!-- 답글 버튼 \r\n");
      out.write("\t\t\t\t\t\t value속성으로는 몇번 댓글에 대한 답글인지 - 댓글 번호-->\r\n");
      out.write("\t\t\t\t\t<button class=\"btn-reply\" value=\"");
      out.print( bc.getNo() );
      out.write("\">답글</button>\r\n");
      out.write("\t\t\t\t\t");
 if(removable) { 
      out.write("\r\n");
      out.write("\t\t\t\t\t<button class=\"btn-delete\" value=\"");
      out.print( bc.getNo() );
      out.write("\">삭제</button>\r\n");
      out.write("\t\t\t\t\t");
 } 
      out.write("\r\n");
      out.write("\t\t\t\t</td>\r\n");
      out.write("\t\t\t</tr>\t\r\n");
      out.write("\t\t");
 	} 
			else {
      out.write("\r\n");
      out.write("\t\t\t\t<!-- 대댓글-->\r\n");
      out.write("\t\t\t\t<tr class=\"level2\">\r\n");
      out.write("\t\t\t\t<td>\r\n");
      out.write("\t\t\t\t\t<!-- sub태그 : 글씨를 첨자처럼 작게 나타내주는 태그 -->\r\n");
      out.write("\t\t\t\t\t<sub class=\"comment-writer\">");
      out.print( bc.getWriter() );
      out.write("</sub>\r\n");
      out.write("\t\t\t\t\t<sub class=\"comment-date\">");
      out.print( bc.getRegDate() );
      out.write("</sub>\r\n");
      out.write("\t\t\t\t\t<br />\r\n");
      out.write("\t\t\t\t\t");
      out.print( bc.getContent() );
      out.write("\r\n");
      out.write("\t\t\t\t</td>\r\n");
      out.write("\t\t\t\t<!-- 대댓글에는 더이상 답글 버튼을 제공하지 않음 -->\r\n");
      out.write("\t\t\t\t<td>\r\n");
      out.write("\t\t\t\t\t");
 if(removable) { 
      out.write("\r\n");
      out.write("\t\t\t\t\t<button class=\"btn-delete\" value=\"");
      out.print( bc.getNo() );
      out.write("\">삭제</button>\r\n");
      out.write("\t\t\t\t\t");
 } 
      out.write("\r\n");
      out.write("\t\t\t\t</td>\r\n");
      out.write("\t\t\t</tr>\t\r\n");
      out.write("\t\t");
 		}
			} 
      out.write("\r\n");
      out.write("\t\t</table>\r\n");
      out.write("\t\t");
 } 
      out.write("\t\t\t\r\n");
      out.write("\t</div>\r\n");
      out.write("</section>\r\n");
 if(editable) { 
      out.write("\r\n");
      out.write("<!-- 게시글 삭제하기를 처리할 숨겨진 폼 -->\r\n");
      out.write("<form\r\n");
      out.write("\taction=\"");
      out.print( request.getContextPath() );
      out.write("/board/boardDelete\" \r\n");
      out.write("\tname=\"boardDelFrm\"\r\n");
      out.write("\tmethod=\"POST\">\r\n");
      out.write("<input type=\"hidden\" name=\"no\" value=\"");
      out.print( board.getNo() );
      out.write("\" />\r\n");
      out.write("</form>\r\n");
      out.write("<!-- 게시글 수정에 대한 스크립트 -->\r\n");
      out.write("<script>\r\n");
      out.write("function deleteBoard(){\r\n");
      out.write("/* 삭제의 경우 확인작업 필요*/\r\n");
      out.write("\tif(confirm(\"게시글을 정말 삭제하시겠습니까?\")){\r\n");
      out.write("\t\t$(document.boardDelFrm).submit();\r\n");
      out.write("\t}\r\n");
      out.write("}\r\n");
      out.write("/* 업데이트 폼을 요청 - 페이지 이동 */\r\n");
      out.write("function updateBoard(){\r\n");
      out.write("\tlocation.href = \"");
      out.print( request.getContextPath() );
      out.write("/board/boardUpdate?no=");
      out.print( board.getNo());
      out.write("\";\r\n");
      out.write("}\r\n");
      out.write("</script>\r\n");
 } 
      out.write("\r\n");
      out.write("<!-- 댓글,답글 삭제하기를 처리할 숨겨진 폼 -->\r\n");
      out.write("<form\r\n");
      out.write("\taction=\"");
      out.print( request.getContextPath());
      out.write("/board/boardCommentDelete\"\r\n");
      out.write("\tname=\"boardCommentDelFrm\"\r\n");
      out.write("\tmethod=\"POST\">\r\n");
      out.write("<!-- name값으로 boardComment의 no -->\r\n");
      out.write("<input type=\"hidden\" name=\"no\" />\r\n");
      out.write("<!-- 삭제 후 현재페이지로 돌아옴 - 돌아올 게시글 번호도 필요함\r\n");
      out.write("\t 무엇을 삭제하든 게시물번호는 동일하므로 value로 고정해줌 -->\r\n");
      out.write("<input type=\"hidden\" name=\"boardNo\" value=\"");
      out.print( board.getNo() );
      out.write("\" />\r\n");
      out.write("</form>\r\n");
      out.write("<!-- 댓글 작성시 로그인 알림용 스크립트 -->\r\n");
      out.write("<script>  \r\n");
      out.write("/* content에 포커스가 갈때 함수 실행 */\r\n");
      out.write("$(\"[name=content]\").focus(function(){\r\n");
      out.write("\t/* 로그인 여부 검사 */\r\n");
      out.write("\t");
 if(loginMember == null){ 
      out.write("\r\n");
      out.write("\t/* 로그인을 하지 않았다면, loginAlert()함수 호출 */\r\n");
      out.write("\tloginAlert();\r\n");
      out.write("\t");
 } 
      out.write("\r\n");
      out.write("});\r\n");
      out.write("/* 버튼을 먼저 누를경우, 유효성 검사 */\r\n");
      out.write("// document객체(상위)에서 submit이벤트에서 핸들링하는데, boardCommentFrm이 요청했을 때\r\n");
      out.write("// form위의 태그들, 그 위의 태그들까지 모두 document객체에 의해 관리됨, 최상위부모태그인 document객체에 적용\r\n");
      out.write("// document객체가 아니더라도 두개의 form을 아우를 수 있는 부모태그면 ok\r\n");
      out.write("// name=boardCommentFrm인 이벤트타겟에 submit 이벤트가 document에 전달이 되면 해당 function을 실행해라\r\n");
      out.write("$(document).on('submit', '[name=boardCommentFrm]', function(e){\r\n");
      out.write("// $(document.boardCommentFrm).submit(function(){\r\n");
      out.write("\t/* 로그인 여부 검사 */\r\n");
      out.write("\t");
 if(loginMember == null){ 
      out.write("\r\n");
      out.write("\t/* 로그인을 하지 않았다면, loginAlert()함수 호출 */\r\n");
      out.write("\tloginAlert();\r\n");
      out.write("\t/* 제출되지 않도록 처리 */\r\n");
      out.write("\treturn false;\r\n");
      out.write("\t");
 } 
      out.write("\r\n");
      out.write("\t// 댓글내용\r\n");
      out.write("\t// 두번째 인자로 context 지정 (이 하위에서 이 선택자를 찾음)\r\n");
      out.write("\tvar $content = $(\"[name=content]\", e.target);\r\n");
      out.write("\t/* 아무문자나 개행문자까지도 하나라도 있는지 검사 */\r\n");
      out.write("\tif(/^(.|\\n)+$/.test($content.val()) == false){\r\n");
      out.write("\t\t/* 알림창 띄우기 */\r\n");
      out.write("\t\talert(\"댓글내용을 작성하세요.\");\r\n");
      out.write("\t\t/* content부분에 커서 포커스 처리 */\r\n");
      out.write("\t\t$content.focus();\r\n");
      out.write("\t\t/* 제출되지 않도록 처리 */\r\n");
      out.write("\t\treturn false;\r\n");
      out.write("\t}\r\n");
      out.write("});\r\n");
      out.write("function loginAlert(){\r\n");
      out.write("\t/* 경고창을 띄우고 */\r\n");
      out.write("\talert(\"로그인 이후 이용할 수 있습니다.\");\r\n");
      out.write("\t/* memberId 입력부분을 커서포커스해줌 -> 로그인 유도 */\r\n");
      out.write("\t$(\"#memberId\").focus();\r\n");
      out.write("}\r\n");
      out.write("/* 답글 버튼 클릭시 폼 제공 */\r\n");
      out.write("$(\".btn-reply\").click(function(){\r\n");
      out.write("\t// 로그인 안했을 경우, 대댓글 못쓰도록 경고창 띄우고 밑에것이 처리안되도록 return처리\r\n");
      out.write("\t");
 if(loginMember == null){ 
      out.write("\r\n");
      out.write("\t\tloginAlert();\r\n");
      out.write("\t\treturn;\r\n");
      out.write("\t");
 } 
      out.write("\r\n");
      out.write("\t// 대댓글 작성폼 동적으로 생성\r\n");
      out.write("\t// 바깥과 안쪽의 쌍따음표|홑따음표가 겹치지 않도록 주의\r\n");
      out.write("\tvar html = \"<tr>\";\r\n");
      out.write("\thtml += \"<td  colspan = '2' style='display : none; text-align : left'>\";\r\n");
      out.write("\t// form 시작\r\n");
      out.write("    html += '<form action=\"");
      out.print(request.getContextPath());
      out.write("/board/boardCommentInsert\" method=\"post\" name=\"boardCommentFrm\">';\r\n");
      out.write("    html += '<input type=\"hidden\" name=\"boardNo\" value=\"");
      out.print( board.getNo() );
      out.write("\" />';\r\n");
      out.write("    html += '<input type=\"hidden\" name=\"writer\" value=\"");
      out.print( loginMember != null ? loginMember.getMemberId() : "");
      out.write("\"/>';\r\n");
      out.write("    html += '<input type=\"hidden\" name=\"commentLevel\" value=\"2\" />'; // commentLevel은 2로 설정\r\n");
      out.write("    html += '<input type=\"hidden\" name=\"commentRef\" value=\"' + $(this).val() + '\" />';  // 대댓글 -> commentRef값이 있음\r\n");
      out.write("    html += '<textarea name=\"content\" cols=\"60\" rows=\"2\"></textarea>';\r\n");
      out.write("    html += '<button type=\"submit\" class=\"btn-insert-reply\">등록</button>'; // 여러개일수 있으므로 id값이 아닌 class값으로 처리\r\n");
      out.write("\thtml += '</form>';\r\n");
      out.write("\thtml += \"</td\";\r\n");
      out.write("\thtml += \"</tr>\";\r\n");
      out.write("\t\r\n");
      out.write("\t// 버튼의 tr태그 찾기\r\n");
      out.write("\tvar $trOfBtn = $(this).parent().parent(); // 버튼의 parent(td), 그 td의 parent(tr)\r\n");
      out.write("\t// 위에서 만든 html을 jQuery객체로 만든 후 insertAfter\r\n");
      out.write("\t$(html)\r\n");
      out.write("\t\t.insertAfter($trOfBtn) // 버튼 태그가 속한 tr태그 다음요소로 html을 추가함\r\n");
      out.write("\t\t.children(\"td\") // tr태그의 자식태그(td)를 찾아서\r\n");
      out.write("\t\t.slideDown(800); // slideDown효과를 주기\r\n");
      out.write("\t\t\r\n");
      out.write("\t// 버튼은 1회용으로 처리\r\n");
      out.write("\t// 한번만 버튼이 생성되고 그 후로는 답글 버튼을 눌러도 답글폼이 만들어지지 않도록\r\n");
      out.write("\t$(this).off(\"click\"); // click 이벤트 핸들러를 막기\r\n");
      out.write("});\r\n");
      out.write("/* 삭제버튼 클릭시 이벤트 핸들러 */\r\n");
      out.write("$(\".btn-delete\").click(function(){\r\n");
      out.write("\tif(confirm(\"해당 댓글을 삭제하시겠습니까?\")){\r\n");
      out.write("\t\tvar $frm = $(document.boardCommentDelFrm);\r\n");
      out.write("\t\tvar boardCommentNo = $(this).val(); // 삭제 button의 val를 가져옴\r\n");
      out.write("\t\t// 어떤 댓글/답글에 대한 삭제버튼인지 가져와야 함\r\n");
      out.write("\t\t// no의 value값을 buttonCommentNo로 세팅\r\n");
      out.write("\t\t$frm.find(\"[name=no]\").val(boardCommentNo);\r\n");
      out.write("\t\t$frm.submit();\r\n");
      out.write("\t\t}\r\n");
      out.write("\t});\r\n");
      out.write("</script>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\t\t</section>\r\n");
      out.write("\r\n");
      out.write("\t\t<footer>\r\n");
      out.write("\t\t\t<p>&lt;Copyright 1998-2021 <strong>KH정보교육원</strong>. All rights reserved.&gt;</p>\r\n");
      out.write("\t\t</footer>\r\n");
      out.write("\t</div>\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
