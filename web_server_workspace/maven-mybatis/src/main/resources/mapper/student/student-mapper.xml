<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
 <!-- namespace - 여러개의 mapper클래스들을 구분하는 구분자
 	  namespace로부터 태그들을 찾아들어가게 됨 -->
<mapper namespace="student"> 
	<!-- 추가할 쿼리의 키워드를 태그로 만들고, 그 ID값과 속성 지정
		 parameterType="" 어떤 타입의 파라미터를 전달하는지 -->
	<!-- vo객체  : 값전달시 #{getter에서 get을 제외하고, 소문자로 시작하는 이름} OGNL방식
		 student객체를 파라미터로 전달했기 때문에 사용가능 -->
	<!-- <insert id="insertStudent" parameterType="com.kh.mybatis.student.model.vo.Student">
		 parameterType으로 별칭으로만 적을 수 있음  -> mybatis-config.xml에서 처리 -->
	<insert id="insertStudent" parameterType="student">
		insert into
			student (no, name, tel)
		values(
			seq_student_no.nextval,
			#{name},
			#{tel}
		)
	</insert>
<!-- =============================[회원등록 (Map)]============================= -->
	<!-- parameter type을 map으로 해줘야함 -->
	<!-- map : #{key값} -->
	<insert id="insertStudentMap" parameterType="map">
		insert into
			student (no, name, tel)
		values(
			seq_student_no.nextval,
			#{name},
			#{tel}
		)
	</insert>
<!-- =============================[회원조회 (Vo)]============================= -->
	<!-- select태그의 resultType/resultMap은 필수속성이다. 둘중 하나 반드시 작성
		 cf. insert태그의 parameterType은 필수속성이 아님 -->
	<select id="selectStudentCount" resultType="_int">
		select 
			count(*)
		from
			student
	</select>
	<!-- resultSet을 mybatis가 자동으로 vo에 binding해줌
		 1. 동일한 이름의 setter를 통해 값대입
		 2. 자동형변환 처리 
		 	기본룰 : varchar2, char -> String
		 		   number -> int/double
		 		   date -> java.util.Date
		 cf. 필드명 불일치시
		 해결법 1. query alias 지정 - 대소문자 구분을 위해 "" 필수
		    	select reg_date "regDate"
		 해결법 2. resultMap - db컬럼과 vo필드(property)를 연결
		 해결법 3. mybatis-config.xml의 setting태그 mapUnderscoreCamelCase를 true로설정
		 -->
	<!-- 원래는 패키지명 포함 풀네임을 적어줘야 하지만, mybatis-config.xml에 별칭을 등록해뒀기 때문에 student 사용 가능 -->
	<!-- 파라미터로 전달한 데이터 : #{전달한 데이터} -->
 	<select id="selectOneStudent" resultType="student">
		select
			*
		from
			student
		where no = #{no}
	</select>
	<!-- [해결법 1] -->
<!-- 	<select id="selectOneStudent" resultType="student">
		select
			no,
			name,
			tel,
			reg_date "regDate"
		from
			student
		where no = #{no}
	</select> -->
	<!-- [해결법 2] -->
<!-- 	<select id="selectOneStudent" resultMap="studentVoMap">
		select
			*
		from
			student
		where no = #{no}
	</select> -->
	<!-- 
		resultMap - db컬럼(column)과 vo필드(property)를 연결
		1. 이름 불일치 해결
		2. 형변환처리를 임의로 지정
		
		- column과 property가 동일하다면, 해당 자식태그는 생략가능
		- resultMap은 재사용이 가능함
	 -->
<!-- 	<resultMap type="student" id="studentVoMap">
		// id속성 : select태그의 resultMap을 resultMap태그의 id와 동일하게 함
		// -> select태그의 resultMap처리를 resultMap태그에 위임하겠다는 의미
		// type속성 : 최종적으로 리턴할 타입
		// -> 컬럼 하나당 property하나를 연결시킴
		// id태그 : pk컬럼용
		// column 속성 : DB의 컬럼명
		// property 속성 : VO의 필드명
		<id column="no" property="no"/> // 생략가능
		// result태그 : 나머지 컬럼용 
		<result column="name" property="name"/> // 생략가능
		<result column="tel" property="tel"/> // 생략가능
		<result column="reg_date" property="regDate"/> 
	</resultMap> -->
<!-- =============================[회원조회 (Map)]============================= -->
	<!-- select태그의 필수속성 : resultType|resultMap
		 map의 경우, resultType이 map이든 hashmap이든 상관없음.
		 어차피 처리는 hashmap으로 처리됨 -->
<!-- [문제점 : select *] key값이 모두 대문자로 처리됨 -->
<!-- 	<select id="selectOneStudentMap" resultType="hashmap">
		select
			*
		from
			student
		where
			no = #{no}
	</select> -->
<!-- [해결법1 : 별칭지정] key값들을 소문자로 처리가능 
					    -> 별칭이 key값이 됨-->
<!-- 	<select id="selectOneStudentMap" resultType="hashmap">
		select
			no "no",
			name "name",
			tel "tel",
			reg_date "regDate"
		from
			student
		where
			no = #{no}
	</select> -->
<!-- [해결법2 : resultMap] column에 대한 property를 지정. key값들을 원하는대로 지정 가능 -> 소문자로 처리가능 -->
	<select id="selectOneStudentMap" resultMap="studentMap">
		select
			*
		from
			student
		where
			no = #{no}
	</select>
	<resultMap type="map" id="studentMap">
		<!-- 이때의 리턴될 type은 map -->
		<!-- 이때는 property가 key값이 됨 
			 cf. DB쪽인 column속성으로는 대소문자를 구분하지 않지만 property는 대소문자를 구분하므로 주의! -->
		<!-- column과 property가 동일하다면 생략가능하지만,
			 column이 대문자로 되기 때문에 모두 소문자 + camel casing 적용해줌 -->
		<id column="no" property="no"/>
		<result column="name" property="name"/>
		<result column="tel" property="tel"/> 
		<result column="reg_date" property="regDate"/>
	</resultMap>
<!-- =============================[회원수정]============================= -->
	<update id="updateStudent">
		update
			student
		set
			name = #{name},
			tel = #{tel}
		where
			no = #{no}
	</update>
<!-- =============================[회원삭제]============================= -->
	<delete id="deleteStudent">
		delete from
			student
		where
			no = #{no}
	</delete>
<!-- =============================[전체회원조회 (List)]============================= -->
	<!-- 여러행이라도 resultType은 한 행의 타입을 적음 -->
	<!-- mybatis-config에 mapUnderscoreToCamelcase 설정했기 때문에, reg_date -> regDate로 잘 담김 -->
	<select id="selectStudentList" resultType="student">
		select
			*
		from
			student
		order by
			no desc
	</select>
<!-- =============================[전체회원조회 (MapList)]============================= -->
	<!-- <select id="selectStudentMapList" resultType="map"> -->
	<!-- resultType이 map의 경우, db컬럼명을 대문자로 처리됨
		 cf. mapUnderscoreToCamelcase 설정은 vo에 한해서 처리됨 -->
	<!-- mapList@controller = [{NO=23, REG_DATE=2021-05-07 18:07:15.0, TEL=01011111111, NAME=히히} ... ] -->
	<!-- [해결법1.] alias 사용 -->
	<!-- [해결법2.] resultMap 사용-->
	<select id="selectStudentMapList" resultMap="studentMap">
	<!-- mapList@controller = [{no=23, name=히히, regDate=2021-05-07 18:07:15.0, tel=01011111111} ... ] -->
		select
			*
		from
			student
		order by
			no desc	
	</select>
</mapper>